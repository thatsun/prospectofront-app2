const useInterval=(callback, delay)=> {
        const savedCallback = useRef();
      
        // Remember the latest callback.
        useEffect(() => {
          savedCallback.current = callback;
        }, [callback]);
      
        // Set up the interval.
        useEffect(() => {
          function tick() {
            savedCallback.current();
          }
          if (delay !== null) {
            let id = setInterval(tick, delay);
            return () => clearInterval(id);
          }
        }, [delay]);
    }
    useInterval(() =>{       
        if(loged===true && userid!=='' && actualtoken!==''){ 
                console.log('fetching')
                console.log(loged);
                console.log(userid);
                console.log(actualtoken);   
                const newsurl = '/news';                
                fetch(newsurl, {
                    method: 'GET',
                    mode: 'cors',
                    headers: {                
                        'Authorization': 'bearer '+actualtoken
                    }
                }).then(resp => resp.json()
                ).then( (data ) => {
                    
                    if(data.message==='newsobtained'){
                        setFeeddata(data);

                    }
                    
                })
                .catch(err => {
                    console.log(err);
                    
                });

        }
        setCount(count+1);
    }, 600000);
